# 8CE Attourny 
# An Octo Game  

# You have 16 bytes ##################################################
:alias temp0 v0
:alias temp1 v1
:alias x v2
:alias y v3
:alias TEMPX v4
:alias TEMPY v5
:alias keypressed v6 
:alias gamestate v7 
:alias tempgamestate v8 
:alias inv_count v9 
:alias inv_show va 
:alias pressflag vb 
:alias BLANKc vc  
:alias loopcounter vd
:alias gtlt ve
:alias temp_inv ve
:alias textlength ve
:alias CARRY_FLAG vF


# Images Resources ##################################################
: textBoxBorder
    0xFF 0x99 0xFF 0xFF 0xFF
    0xFF 0xFF 0xFF 0xFF 0xFF 
    0xFF 0xFF 0xFF 0xFF 0xFf
: button_press
    0xFF 0xC7 0xF7 0xEE 0xFC
: button_object
    0xFF 0xE3 0xE3 0x7B 0x3F 
: cursor_object
    0xE0 0x90 0x88 0xF8 
: objection
    0x10 0x38 0x7C 0x44 0xC6 0xC6 0xC6 0xC6 
    0xC6 0xFE 0xC6 0x44 0x7C 0x38 0x10 

# People ##################################################
: ppl_jan_default_a
    0x07 0x1F 0x20 0x2F 0x10
    0x0B 0x1B 0x1F 0x0E 0x07 
    0x1C 0x21 0x53 0xFF 0x80 
: ppl_jan_default_b
    0xe0 0xF0 0x08 0xE8 0x10 
    0xA0 0xB0 0xF0 0x60 0xC0 
    0x70 0x08 0x94 0xFF 0x01 
: ppl_law_default_a
    0x0F 0x3C 0x73 0x6E 0xEE
    0xEF 0x5D 0x5E 0xCF 0x6E
    0xD9 0x26 0xD9 0xBE 0xBF 
: ppl_law_default_b
    0x90 0x60 0x80 0xC0 0xC0
    0xC0 0x80 0x00 0x00 0x00
    0x00 0x00 0x38 0x54 0xB4 
: ppl_pro_default_a
    0x00 0x00 0x00 0x00 0x00
    0x00 0x00 0x00 0x00 0x00
    0x00 0x1C 0x2A 0x2E 0x3F 
: ppl_pro_default_b
    0x00 0x38 0x7C 0x7C 0x7C
    0x5E 0xFE 0xFE 0x74 0x4C
    0x3A 0xC7 0x4F 0x27 0xFF 
: ppl_det_default_a
    0x00 0x07 0x17 0x58 0x27
    0x2D 0x8D 0xAF 0x44 0x13
    0x98 0x67 0x84 0xFF 0x80 
: ppl_det_default_b
    0x00 0xC0 0xD0 0x34 0xC8
    0x68 0x62 0xEA 0x44 0x90
    0x32 0xCC 0x42 0xFF 0x01 
: ppl_jud_default_a
    0x00 0x07 0x0F 0x0D 0x1D
    0x17 0x08 0x0F 0x0C 0x07
    0x18 0x39 0x7C 0xFF 0x80 
: ppl_jud_default_b
    0x00 0xC0 0xE0 0x60 0x70
    0xD0 0x20 0xE0 0x60 0xC0
    0x30 0x3C 0x7E 0xFF 0x01 

# Items ##################################################
: item_1 #badge
0x3C 0x42 0x99 0xA5 0xA5 0x99 0x42 0x3C 
: item_2 #report
0xFF 0xB1 0x81 0xBD 0x81 0xBD 0x81 0xFF 
: item_3 #photo
0x3F 0x7F 0xFF 0xBF 0xBF 0xFF 0x7F 0x3F 
: item_4 #mug
0xC6 0xC6 0x6C 0x38 0x38 0x6C 0xC6 0xC6 
: GAME_ITEMS
0 1 2 3

# Font ##################################################
: letA
    0x70 0x88 0xF8 0x88 0x88 
: letB
    0xF0 0x88 0xF0 0x88 0xF0 
: letC
    0x70 0x88 0x80 0x88 0x70 
: letD 
    0xF0 0x88 0x88 0x88 0xF0 
: letE 
    0xF8 0x80 0xE0 0x80 0xF8 
: letF 
    0xF8 0x80 0xE0 0x80 0x80
: letG 
    0x78 0x80 0x98 0x88 0x78 
: letH 
    0x88 0x88 0xF8 0x88 0x88 
: letI 
    0xF8 0x20 0x20 0x20 0xF8
: letJ 
    0xF8 0x10 0x10 0x50 0x70 
: letK 
    0x88 0x90 0xE0 0x90 0x88 
: letL 
    0x40 0x40 0x40 0x40 0x78 
: letM 
    0xD8 0xA8 0x88 0x88 0x88 
: letN 
    0xC8 0xC8 0xA8 0x98 0x98
: letO 
    0xF8 0x88 0x88 0x88 0xF8 
: letP 
    0xF8 0x88 0xF8 0x80 0x80 
: letQ 
    0xF8 0x88 0xA8 0xF8 0x10 
: letR 
    0xF8 0x88 0xF0 0x88 0x88 
: letS 
    0x78 0x80 0x70 0x08 0xF0 
: letT 
    0xF8 0x20 0x20 0x20 0x20 
: letU 
    0x88 0x88 0x88 0x88 0x70 
: letV 
    0x88 0x88 0x88 0x50 0x20 
: letW 
    0x88 0x88 0x88 0xA8 0xD8
: letX 
    0x88 0x50 0x20 0x50 0x88 
: letY 
    0x88 0x50 0x20 0x20 0x20
: letZ 
    0xF8 0x10 0x20 0x40 0xF8 
: letCOMMA 
    0x00 0x00 0x00 0x30 0x10 
: letPERIOD 
    0x00 0x00 0x00 0x30 0x30 
: letBANG
    0x30 0x30 0x30 0x00 0x30
: letQUESTION
    0x70 0x10 0x20 0x00 0x20 
: letSPACE 
    0x00 0x00 0x00 0x00 0x00
: letMARK
    0x00 0x70 0x50 0x70 0x00 
: letHEART
: letCOLON
    0x00 0x40 0x00 0x40 0x00
: let1
    0x20 0x20 0x20 0x20 0x20
: let2
    0xF0 0x08 0xF8 0x80 0xF8
: let3
    0xf0 0x08 0xf8 0x08 0xf0
: let4
    0x30 0x50 0x90 0xF8 0x10 
: let5
    0xF8 0x80 0xF0 0x08 0xF0
: let6
    0x70 0x80 0xF0 0x88 0x70
: let7
    0xF8 0x08 0x10 0x20 0x40
: let8
    0x70 0x88 0x70 0x88 0x70
: let9
    0xF8 0x88 0xF8 0x08 0x08


# Table ##################################################
: items
i := item_1 ;		# 0
i := item_2 ;		# 1
i := item_3 ;		# 2
i := item_4 ;		# 3

: font
i := letSPACE ;		# 0
i := letA ; 		# 1
i := letB ;		# 2
i := letC ;		# 3
i := letD ;		# 4
i := letE ;		# 5
i := letF ;		# 6
i := letG ;		# 7
i := letH ;		# 8
i := letI ;		# 9
i := letJ ;		# 10
i := letK ;		# 11
i := letL ;		# 12
i := letM ;		# 13
i := letN ;		# 14
i := letO ;		# 15
i := letP ;		# 16
i := letQ ;		# 17
i := letR ;		# 18
i := letS ;		# 19
i := letT ;		# 20
i := letU ;		# 21
i := letV ;		# 22
i := letW ;		# 23
i := letX ;		# 24
i := letY ;		# 25
i := letZ ;		# 26
i := letCOMMA ;		# 27
i := letPERIOD ;	# 28
i := letBANG ;		# 29
i := letQUESTION ;	# 30
i := letMARK ;		# 31
i := letHEART  ;	# 32
i := letCOLON ;    	# 33
i := let1 ; 		# 34
i := let2 ;		# 35
i := let3 ;             # 36
i := let4 ;             # 37
i := let5 ;             # 38
i := let6 ;             # 39
i := let7 ;             # 40
i := let8 ;             # 41
i := let9 ;             # 42


# Strings #############################################################
# -- Items ############################################################
: t_item1							####
    12 01 23 25 05 18 00 02 04 07 03 15 21 18 20 00 09 04 00 00 
    # Lawyer_BDGCourt_ID__

: t_item2							####
    01 21 20 15 16 19 25 18 16 20 19 20 01 09 18 19 34 35 01 13 
    # AutopsyRPTStairs12AM

: t_item3							####
    16 18 15 19 05 03 21 20 15 18 03 15 06 06 05 05 00 03 21 16
    # PHOTO_BODYAND_SHARDS

: t_item4							####
        03 01 14 03 05 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     # CANCEL              
    # PROSECUTORCOFFEE_CUP
# -- Tutorial 1 ############################################################
# CHIPS1: Modified text to refer to correct keys.
: tut0
    03 18 15 19 19 00 05 24 01 13 08 05 00 04 09 04 00 09 20 00     # CROSS EXAMHE DID IT
: tut1
    08 09 20 00 25 37 00 06 15 18 00 13 15 18 05 00 09 14 06 15     # HIT Y4 FOR MORE INFO
: tut2
    08 09 20 00 25 36 00 20 15 00 07 15 00 06 15 18 23 01 18 04     # HIT Y3 TO GO FORWARD
: tut3
    08 09 20 00 25 35 00 20 15 00 19 08 15 23 00 09 20 05 13 28     # HIT Y2 TO SHOW ITEM.

# -- Cross Exam 1 ############################################################

: cx1
    20 08 05 10 01 14 09 20 15 18 04 09 04 00 09 20 28 00 00 00
    # Thejanitordid it.

: cx2
    03 01 13 05 18 01 00 19 01 23 20 08 05 13 00 05 14 20 05 18 
    # Camera sawthem enter

: cx3
    20 08 05 18 05 19 00 14 15 00 15 14 05 00 05 12 19 05 28 00
    # Theres noone else.

# -- You fucked up ############################################################
 : uf1
    10 21 04 07 05 33 20 08 01 20 04 15 05 19 00 14 15 20 00 00    # JUDGE:ThatDoes Not
 : uf2
    13 01 11 05 00 19 05 14 19 05 00 00 00 00 00 00 00 00 00 00    # make sense
 : uf3
    02 05 12 12 33 00 00 00 00 00 19 15 18 18 25 28 00 00 00 00     # Bell:     Sorry.
# -- Cross Exam 1 Responces ############################################################

: re11
    02 05 12 12 33 00 23 08 25 00 04 15 00 25 15 21 00 19 01 25     # BELL: Why do you say
: re12
    20 08 01 20 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     # that?               
: re13  
    04 05 20 05 03 20 09 22 05 33 28 28 28 00 00 00 00 00 00 00     # DETECTIVE: ...

: re21
    02 05 12 12 33 00 14 15 00 00 15 14 05 00 05 12 19 05 00 00     # Bell: No  one else  

: re22
    12 05 06 20 05 24 03 05 16 20 13 25 00 03 12 09 05 14 20 30     # leftexceptmy client?
: re23
    04 05 20 05 03 20 09 22 05 33 03 15 18 18 05 03 20 28 00 00     # DETECTIVE:Correct.  

: re31
    02 05 12 12 33 00 23 08 15 00 05 12 19 05 00 03 15 21 12 04     # BELL: Who else could

: re32
    02 05 00 09 14 00 20 08 05 00 03 15 21 18 20 08 15 21 19 05     # be in the courthouse

: re33
    12 01 20 05 00 01 20 00 00 00 14 09 07 08 20 30 00 00 00 00    # late at   night?

: re34
    03 01 14 00 09 16 18 15 22 05 09 20 00 23 09 20 08 00 01 14     # Can IProveit with an

: re35
    05 22 09 04 05 14 03 05 30 00 00 00 00 00 00 00 00 00 00 00     # evidence?           

# -- AAAAh ######################
: w1
    02 05 12 12 33 00 09 20 00 00 23 01 19 00 19 15 13 05 34 00     # Bell: It  was some1 
: w2
    23 15 18 11 09 14 07 00 00 00 12 01 20 05 00 19 15 00 00 00     # working   late so   
: w3
    20 08 05 25 00 23 15 21 12 04 14 15 20 00 02 05 00 15 14 00    # they wouldnot be on
: w4
    03 01 13 05 18 01 29 00 00 00 00 00 00 00 00 00 00 00 00 00     # camera!
: w5
    10 21 04 07 05 33 20 08 01 20 09 19 00 18 09 07 08 20 29 00    # Judge:Thatis right!

: t1
    16 15 23 05 18 00 15 06 06 00 01 14 04 00 12 15 01 04 00 00
    # POWER OFF AND LOAD 

: t2 
    07 01 13 05 00 03 01 18 20 00 14 21 13 02 05 18 00 36 00 00 
    # GAME CART NUMBER 2  

# System Code ##################################################
: main
    inv_count := 4
    if gamestate == 0 begin
    drawtitle
    waitinput()
    clear
    tutorial(1)
    end


    loop

    if gamestate == 1 begin
       crossexam
    end
    gamestate := 1


    
    sync()
    again
;    
: script_getitems
    :unpack 0xA t1
    text(print)
    waitinput()
    :unpack 0xA t1
    text(erase)
    :unpack 0xA t2
    text(print)
    waitinput()
    :unpack 0xA t2
    text(erase)
    clear
    script_getitems
;
: sync() # Sync between Chip-8 versions.
    loop
        vf := delay
        if vf != 0 then
    again
;

# Draw_People  ##################################################

: draw_person(jan)
    x := 24
    y := 2
    i := ppl_jan_default_a
    sprite x y 15
    x += 8
    i := ppl_jan_default_b
    sprite x y 15    
;

: draw_person(law)
    x := 1
    y := 2
    i := ppl_law_default_a
    sprite x y 15
    x += 8
    i := ppl_law_default_b
    sprite x y 15    
;

: draw_person(pro)
    x := 47
    y := 2
    i := ppl_pro_default_a
    sprite x y 15
    x += 8
    i := ppl_pro_default_b
    sprite x y 15    
;

: draw_person(dec)
    x := 24
    y := 2
    i := ppl_det_default_a
    sprite x y 15
    x += 8
    i := ppl_det_default_b
    sprite x y 15    
;

: draw_person(jud)
    x := 24
    y := 2
    i := ppl_jud_default_a
    sprite x y 15
    x += 8
    i := ppl_jud_default_b
    sprite x y 15    
;

: draw_objection(law)
    x := 15
    y := 1
    i := objection
    sprite x y 15    
;

: draw_objection(pro)
    x := 41
    y := 1
    i := objection
    sprite x y 15    
;

# Text Code ##################################################
: waitinput() # Press any key to continue.
    loopcounter := 0
    loop while loopcounter != 1
        keypressed := key # Did they press anything?
            if keypressed != 3 begin
                loopcounter += 1
	    end
        again
;

: gameinput(1) # Press any key to continue.
    loopcounter := 0
    loop while loopcounter != 1
        keypressed := key # Did they press anything?
            if keypressed == 6 begin
                drawInventory()
	    end
            if keypressed == 4 begin
                pressflag := 1
                loopcounter += 1
	    end
            if keypressed == 5 begin
                loopcounter += 1
	    end
        again
;

: drawTextBox()  # Draw textbox for text.
    x := 0
    y := 17
    i := textBoxBorder
    loopcounter := 0
    loop while loopcounter != 8
        sprite x y 15
        x += 8
        loopcounter += 1	
    again
;

: drawOnscreenButtons() # During the cross exam stage
    x := 0
    y := 0
    i := button_press
    sprite x y 5
    x := 56
    i := button_object
    sprite x y 5
;


: text(print) # Draw Text
: text(erase)
    i  := text-addr
    save v1
    x := 2
    y := 20
    loopcounter := 0
    textlength := 20

    loop while loopcounter != textlength 
        : text-addr i := 0 # self-modify to alter
        i += loopcounter
        load temp0
        get-letter()
        sprite x y 5
        x += 6
        loopcounter += 1
        if x == 62 then y += 6
        if x == 62 then x := 2
    again
;

: get-letter() # I know I could skip the table, but I did this by myself.
    v0 <<= v0 # multiply by 4, the table entry size
    v0 <<= v0
    jump0 font
;

# inventory Code ##################################################
: drawInventory()
    clear
    x := 7
    y := 5
    loopcounter := 0
    textlength := inv_count 
    loop while loopcounter != textlength 
        i := GAME_ITEMS 
        i += loopcounter
        load temp0
        get-items()
        sprite x y 8
        x += 16
        loopcounter += 1
    again
    drawTextBox()
    :unpack 0xA t_item1
    text(print)
    updateInvCursor()
;

: updateInvCursor()
    i := cursor_object
    x := 1
    y := 7
    sprite x y 4
    inv_show := 1
    loopcounter := 0
        loop while loopcounter != 1
        keypressed := key # Did they press ANYTHING?
		if keypressed == 7 begin
                     temp_inv := inv_show
                     inv_show += 255
                        if inv_show == 0 begin
                            inv_show := 4
                        end
                     sprite x y 4
                     temp1 := 16
                     x -= temp1
                     sprite x y 4
                     updateInvText()                     
		end

		if keypressed == 9 begin
                     temp_inv := inv_show
                     inv_show += 1
                        if inv_show == 5 begin
                            inv_show := 1
                        end
                     sprite x y 4
                     x += 16
                     sprite x y 4  
                     updateInvText()  
		end

                if keypressed == 6 begin
                    loopcounter += 1
                end

        again
                    if inv_show > inv_count begin
                       inv_show := 0
                    end
                   clear
;

: updateInvText()  # Need to make sure it undraws and redraws correctly.
    TEMPX := x
    TEMPY := y

if temp_inv == 1 begin
    :unpack 0xA t_item1
    text(print)
end
if temp_inv == 2 begin
    :unpack 0xA t_item2
    text(print)
end
if temp_inv == 3 begin
    if inv_count > 2 begin
        :unpack 0xA t_item3
        text(print)
    end
end
if temp_inv == 4 begin
    if inv_count > 3 begin
        :unpack 0xA t_item4
        text(print)
    end
end
if inv_show == 1 begin
    :unpack 0xA t_item1
    text(print)
end
if inv_show == 2 begin
    :unpack 0xA t_item2
    text(print)
end
if inv_show == 3 begin
    if inv_count > 2 begin
        :unpack 0xA t_item3
        text(print)
    end
end
if inv_show == 4 begin
    if inv_count > 3 begin
        :unpack 0xA t_item4
        text(print)
    end
end

    x := TEMPX
    y := TEMPY
    i := cursor_object
    loopcounter := 0
;


: get-items() # todo make this and get-font the same with self-modifying code if space needed.
    v0 <<= v0 # multiply by 4, the table entry size
    v0 <<= v0
    jump0 items
;

# Game Events ##################################################
: tutorial(1)
    drawTextBox()
    draw_person(law)
    :unpack 0xA tut1
    text(print)
    waitinput()
    :unpack 0xA tut1
    text(erase)
    :unpack 0xA tut2
    text(print)
    waitinput()
    :unpack 0xA tut2
    text(erase)
    :unpack 0xA tut3
    text(print)
    waitinput()
    :unpack 0xA tut3
    text(erase)
    draw_person(law)
    drawTextBox()
    :unpack 0xA tut0
    text(print)
    waitinput()
    :unpack 0xA tut0
    text(erase)
    clear
;


: crossexam
    if inv_show == 1 begin
 draw_person(law)
    draw_person(jud)
    drawTextBox()
    :unpack 0xA w1
    text(print)
    waitinput()
    :unpack 0xA w1
    text(erase)
    :unpack 0xA w2
    text(print)
    waitinput()
    :unpack 0xA w2
    text(erase)
    :unpack 0xA w3
    text(print)
    waitinput()
    :unpack 0xA w3
    text(erase)
    :unpack 0xA w4
    text(print)
    waitinput()
    :unpack 0xA w4
    text(erase)
    :unpack 0xA w5
    text(print)
    waitinput()
    :unpack 0xA w5
    text(erase)
    clear
    inv_show := 0
script_getitems
    end
    if inv_show == 2 begin
    clear
    draw_person(law)
    draw_person(jud)
    drawTextBox()
    :unpack 0xA uf1
    text(print)
    waitinput()
    :unpack 0xA uf1
    text(erase)
    :unpack 0xA uf2
    text(print)
    waitinput()
    :unpack 0xA uf2
    text(erase)
    :unpack 0xA uf3
    text(print)
    waitinput()
    :unpack 0xA uf3
    text(erase)
    clear
    inv_show := 0
    end
    if inv_show == 3 begin
    clear
    draw_person(law)
    draw_person(jud)
    drawTextBox()
    :unpack 0xA uf1
    text(print)
    waitinput()
    :unpack 0xA uf1
    text(erase)
    :unpack 0xA uf2
    text(print)
    waitinput()
    :unpack 0xA uf2
    text(erase)
    :unpack 0xA uf3
    text(print)
    waitinput()
    :unpack 0xA uf3
    text(erase)
    clear
    inv_show := 0
    end
    if inv_show == 4 begin
        inv_show := 0
    end
    drawTextBox()
    draw_person(dec)
    drawOnscreenButtons()
    :unpack 0xA cx1
    text(print)
    gamestate := 2
    gameinput(1)
    if inv_show != 0 begin
        clear
        return
    end
    :unpack 0xA cx1
    text(erase)
    if pressflag == 1 begin
    drawOnscreenButtons()
            draw_person(law)  
            :unpack 0xA re11
            text(print)
            waitinput()
            :unpack 0xA re11
            text(erase)
            :unpack 0xA re12
            text(print)
            waitinput()
            :unpack 0xA re12
            text(erase)
            :unpack 0xA re13
            text(print)
            waitinput()
            :unpack 0xA re13
            text(erase)
            draw_person(law)  
    drawOnscreenButtons()
    pressflag := 0
    end
    :unpack 0xA cx2
    text(print)
    gamestate := 3
    gameinput(1)
    if inv_show != 0 begin
        clear
        return
    end
    :unpack 0xA cx2
    text(erase) 
    if pressflag == 1 begin
    drawOnscreenButtons()
            draw_person(law)  
            :unpack 0xA re21
            text(print)
            waitinput()
            :unpack 0xA re21
            text(erase)
            :unpack 0xA re22
            text(print)
            waitinput()
            :unpack 0xA re22
            text(erase)
            :unpack 0xA re23
            text(print)
            waitinput()
            :unpack 0xA re23
            text(erase)
            draw_person(law)  
    drawOnscreenButtons()
    pressflag := 0
    end
    :unpack 0xA cx3
    text(print)
    gameinput(1)
    if inv_show != 0 begin
        clear
        return
    end
    gamestate := 4
    :unpack 0xA cx3
    text(erase)
    if pressflag == 1 begin
    drawOnscreenButtons()
            draw_person(law)  
            :unpack 0xA re31
            text(print)
            waitinput()
            :unpack 0xA re31
            text(erase)
            :unpack 0xA re32
            text(print)
            waitinput()
            :unpack 0xA re32
            text(erase)
            :unpack 0xA re33
            text(print)
            waitinput()
            :unpack 0xA re33
            text(erase)
            waitinput()
            :unpack 0xA re34
            text(print)
            waitinput()
            :unpack 0xA re34
            text(erase)
            :unpack 0xA re35
            text(print)
            waitinput()
            :unpack 0xA re35
            text(erase)
            draw_person(law)  
    drawOnscreenButtons()
    pressflag := 0
    end
    clear
    gamestate := 1
;


# Title Screen ##################################################
: drawtitle
    x := 10
    y := 5
    i := title1
    sprite x y 10
    x += 6
    i := title2
    sprite x y 10
    x += 6
    i := title3
    sprite x y 10
    x := 12
    y += 10
    i := title1
    sprite x y 10
    x += 6
    y += 2
    i := title4
    sprite x y 5  
    x += 6
    i := title4
    sprite x y 5      
    x += 6
    i := title5
    sprite x y 5    
    x += 5
    i := title6
    sprite x y 5 
    x += 5
    i := title7
    sprite x y 5 
    x += 5
    i := title8
    sprite x y 7 
    x := 30
    y := 1
    i := title9
    sprite x y 15
    x += 8
    i := title10
    sprite x y 15
    x := 20
    y := 23
    i := title11
    sprite x y 4
    x := 29
    y := 23
    i := title12
    sprite x y 4
;

# Title Images
#Hacky because I noticed that I really needed to split this into multicarts...

: title1 #8
0x00 0x38 0x6C 0x44 0x6C 0x38 0x6C 0x44 
0x6C 0x38 
: title2 #c
0x00 0x00 0x00 0x00 0x00 0x38 0x64 0x40 
0x64 0x38 
: title3 #e
0x00 0x00 0x00 0x00 0x00 0x38 0x64 0x7C 
0x60 0x38 
: title4 #t
0x30 0x7C 0x30 0x34 0x3C
: title5 #o
0x38 0x7C 0x64 0x64 0x38 
: title6
0x70 0x38 0x28 0x20 0x78 
: title7
0x68 0x68 0x58 0x58 0x58 
: title8
0x48 0x48 0x78 0x18 0x30 0x60 0x60 	
: title9
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xEC 
0x7F 0x07 0x01 0x00 0x00 0x00 0x00 
: title10
0x00 0x18 0x3F 0x7F 0x7F 0x7E 0x7E 0x3C 
0x3C 0xFC 0xFE 0xFE 0xFE 0xFE 0xFE 
: title11
0xC9 0xA2 0xA9 0xCA 
: title12
0xA7 0xC1 0xC6 0xA7  
